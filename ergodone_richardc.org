#+title: ergodone:richardc
#+startup: content

* C preamble

#+begin_src c
#include QMK_KEYBOARD_H
#include "version.h"

#define BASE 0 // default layer
#define SYMB 1 // symbols
#define MDIA 2 // media keys

enum custom_keycodes {
		      PLACEHOLDER = SAFE_RANGE, // can always be here
		      EPRM,
		      VRSN,
		      RGB_SLD
};
#+end_src

* Keyboard Layers
** default layer
:PROPERTIES:
:LAYER:    BASE
:END:

/Left Hand/
| ~=~             | 1           | 2           | 3    | 4     | 5 | left     |
| delete          | q           | w           | e    | r     | t | TG(SYMB) |
| backspace       | a           | s           | d    | f     | g |          |
| shift_l         | CTL_T(KC_Z) | x           | c    | v     | b | hyper    |
| LT(SYMB,KC_GRV) | '           | alt_shift_l | left | right |   |          |

|       | ALT_T(KC_APP) | gui_l |
|       |               | home  |
| space | backspace     | end   |

/Right Hand/
| right    | 6 | 7  | 8    | 9 | 0                 | ~-~            |
| TG(SYMB) | y | u  | i    | o | p                 | \              |
|          | h | j  | k    | l | LT(MDIA, KC_SCLN) | GUI_T(KC_QUOT) |
| meh      | n | m  | ,    | . | CTL_T(KC_SLSH)    | shift_r        |
|          |   | up | down | [ | ]                 | TT(SYMB)       |

| alt_r | CTL_T(KC_ESC) |       |
| pgup  |               |       |
| pgdn  | tab           | enter |

** Symbol layer
:PROPERTIES:
:LAYER:    SYMB
:END:

/Left hand/
| VRSN | f1        | f2 | f3 | f4 | f5    | "" |
| ""   | !         | @  | {  | }  | \vert | "" |
| ""   | shifted_# | $  | (  | )  | `     |    |
| ""   | %         | ^  | [  | ]  | ~     | "" |
| EPRM | ""        | "" | "" | "" |       |    |

|         | RGB_MOD | "" |
|         |         | "" |
| RGB_VAD | RGB_VAI | "" |


/Right hand/
| "" | f6   | f7 | f8 | f9 | f10 | f11 |
| "" | up   |  7 |  8 |  9 | *   | f12 |
|    | down |  4 |  5 |  6 | +   | ""  |
| "" | &    |  1 |  2 |  3 | \   | ""  |
|    |      | "" |  . |  0 | ~=~ | ""  |

| RGB_TOG | RGB_SLD |         |
| ""      |         |         |
| ""      | RGB_HUD | RGB_HUI |

** Media and mouse keys layer
:PROPERTIES:
:LAYER:    MDIA
:END:

Left hand
| "" | "" | ""         | ""            | ""            | "" | "" |
| "" | "" | ""         | mouse_up      | ""            | "" | "" |
| "" | "" | mouse_left | mouse_down    | mouse_right   | "" |    |
| "" | "" | ""         | ""            | ""            | "" | "" |
| "" | "" | ""         | mouse_button1 | mouse_button2 |    |    |

|    | "" | "" |
|    |    | "" |
| "" | "" | "" |

Right Hand
| "" | "" | ""        | ""             | ""         | "" | ""   |
| "" | "" | ""        | ""             | ""         | "" | ""   |
|    | "" | ""        | ""             | ""         | "" | play |
| "" | "" | ""        | previous_track | next_track | "" | ""   |
|    |    | volume_up | volume_down    | mute       | "" | ""   |

| "" | "" |      |
| "" |    |      |
| "" | "" | back |


* C postamble
** process_record_user

~process_record_user~ lets you wire up custom keycodes.  Default
enables ~EPRM~, ~VRSN~, and ~RGB_SLD~ keys.

#+BEGIN_SRC c
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    // dynamically generate these.
  case EPRM:
    if (record->event.pressed) {
      eeconfig_init();
    }
    return false;
    break;
  case VRSN:
    if (record->event.pressed) {
      SEND_STRING (QMK_KEYBOARD "/" QMK_KEYMAP " @ " QMK_VERSION);
    }
    return false;
    break;
  case RGB_SLD:
    if (record->event.pressed) {
#ifdef RGBLIGHT_ENABLE
      rgblight_mode(1);
#endif
    }
    return false;
    break;
  }
  return true;
}
#+end_src

** matrix_init_user
~matrix_init_user~ happens when the key matrix is setup, nothing
special here by default.

#+begin_src c
// Runs just one time when the keyboard initializes.
void matrix_init_user(void) {

};

#+end_src

** matrix_scan_user
~matrix_scan_user~ is used to light the indicator leds to indicate
layer you're in.

#+begin_src c
// Runs constantly in the background, in a loop.
void matrix_scan_user(void) {

  uint8_t layer = biton32(layer_state);

  ergodox_board_led_off();
  ergodox_right_led_1_off();
  ergodox_right_led_2_off();
  ergodox_right_led_3_off();
  switch (layer) {
    // TODO: Make this relevant to the ErgoDox EZ.
  case 1:
    ergodox_right_led_1_on();
    break;
  case 2:
    ergodox_right_led_2_on();
    break;
  default:
    // none
    break;
  }
};
#+END_SRC
