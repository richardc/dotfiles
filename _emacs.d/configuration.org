#+TITLE: Annotated emacs configuration
#+STARTUP: content
# Default to tangling
#+PROPERTY: header-args :tangle yes
* Introduction
  Copied the idea from https://github.com/hrs/dotfiles but there are
  many versions of this knocking about.  You write your config out
  in an org-mode file, so you can navigate and edit it like any
  other note.

** Setup
   [[./init.el]] is a small bootstrap, that sets up a timer and
   then calls this file in all its org-mode goodness.

   More complex versions exist that write this configuration out as the
   init.el in case you don't start with org-mode installed.


* Core
** Tune the GC
   #+begin_src emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+end_src

** package and use-package
   https://github.com/jwiegley/use-package is great for keeping
   settings grouped in with the package that they configure.  Also the
   lazy loading is neat.

   First we set up some package repos, and initialize them
   #+begin_src emacs-lisp
     (require 'package)
     (setq package-archives
	   '(("melpa" . "https://melpa.org/packages/")
	     ("gnu"   . "https://elpa.gnu.org/packages/")))
     (if (version< emacs-version "26.3")
	 (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
     (package-initialize)
   #+end_src

   Basic use-package bootstrap.  Install it, use package at the backend.
   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (eval-when-compile
       (require 'use-package))

     (require 'use-package-ensure)
     (setq use-package-always-ensure t)

   #+end_src

   Chase the high of compiling everthing
   #+begin_src emacs-lisp
     (use-package auto-compile
       :config (auto-compile-on-load-mode))

     (setq load-prefer-newer t)
   #+end_src

** =evil-mode=
   Get the keybindings and navigation of vi, with all the power from an
   operational emacs.

   #+begin_src emacs-lisp
     (use-package evil
       :init
       (setq evil-want-abbrev-expand-on-insert-exit nil)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1))
   #+end_src

   =evil-collection= adds evil support to many things
   #+begin_src emacs-lisp
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))
   #+end_src

   Enable surround everywhere
   #+begin_src emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+end_src

   Use evil with Org agendas.
   #+begin_src emacs-lisp
     (use-package evil-org
       :after org
       :config
       (add-hook 'org-mode-hook 'evil-org-mode)
       (add-hook 'evil-org-mode-hook
		 (lambda () (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src

   =undo-tree=
   Undo/redo
   #+begin_src emacs-lisp
     (use-package undo-tree)
   #+end_src

   =goto-chg=
   #+begin_src emacs-lisp
     (use-package goto-chg)
   #+end_src


* UI
** Theme
   For our theme, spacemacs-dark is alright
   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src

** Font size
   #+begin_src emacs-lisp
     ;; height in 10th points
     (set-face-attribute 'default nil :height 150)
   #+end_src

** Frame (window) size
   #+begin_src emacs-lisp
     (setq initial-frame-alist '((width . 120) (height . 55)))
   #+end_src

** Window decorations
   #+begin_src emacs-lisp
     (when (display-graphic-p)
       (scroll-bar-mode -1))

     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (set-window-scroll-bars (minibuffer-window) nil nil)
   #+end_src

   #+begin_src emacs-lisp
     (setq frame-title-format '((:eval (projectile-project-name))))
   #+end_src

** =prettify-symbols=
   Makes lambda and >= pretty in lisp expressions
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode t)
   #+end_src
** =hl-line=
   Gently highlight the current line
   #+begin_src emacs-lisp
     (global-hl-line-mode)
   #+end_src
** modeline with =moody= and =minions=
   Show *both* line number and column.  Extravagant.
   #+begin_src emacs-lisp
     (setq line-number-mode 1)
     (setq column-number-mode 1)
   #+end_src

   Use =telephone-line= for less fancy, evil-aware, modeline
   #+begin_src emacs-lisp
     (use-package telephone-line
       :config
       (setq telephone-line-lhs
	     '((evil   . (telephone-line-evil-tag-segment))
	       (accent . (telephone-line-vc-segment
			  telephone-line-erc-modified-channels-segment
			  telephone-line-process-segment))
	       (nil    . (telephone-line-minions-mode-segment
			  telephone-line-buffer-segment))))
       (setq telephone-line-rhs
	     '((nil    . (telephone-line-misc-info-segment))
	       (accent . (telephone-line-major-mode-segment))
	       (evil   . (telephone-line-position-segment))))
       (telephone-line-mode 1))
   #+end_src

   Compact display of minor modes with =minions=
   #+begin_src emacs-lisp
     (use-package minions
       :config
       (minions-mode 1))
   #+end_src

** Show matching parens
   #+begin_src emacs-lisp
     (require 'paren)
     (show-paren-mode 1)
     (setq show-paren-delay 0.0)
   #+end_src

** Visible bell
   #+begin_src emacs-lisp
     (setq visible-bell t)
   #+end_src

** Mouse yank
   When middle-clicking the mouse to yank from the clipboard,
   insert the text where point is, not where the mouse cursor is.
   #+begin_src emacs-lisp
     (setq mouse-yank-at-point t)
   #+end_src

** Display relative line numbers
   #+begin_src emacs-lisp :tangle yes
     (setq display-line-numbers 'visual)
   #+end_src

** Save place
   Save your place in files
   #+begin_src emacs-lisp
     (save-place-mode t)
   #+end_src


* Keybindings
** Save
   Cmd-S to save
   #+begin_src emacs-lisp
     (global-set-key (kbd "S-s") 'save-buffer)
   #+end_src
** Unbind =C-z=
   Minimizing the gui isn't that useful.  We'll probably rebind it to undo later.
   #+begin_src emacs-lisp
     (global-unset-key (kbd "C-z"))
   #+end_src


* Editing
** EditorConfig to the rescue
   [[https://editorconfig.org/][EditorConfig]] is the greatest argument avoider.  Use it.
   #+begin_src emacs-lisp
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1))
   #+end_src

** Follow symlinks
   When opening a file, always follow symlinks.
   #+begin_src emacs-lisp :tangle yes
     (setq vc-follow-symlinks t)
   #+end_src

** Executable shebang
   Make files with shebang lines executable on save
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'after-save-hook
	       'executable-make-buffer-file-executable-if-script-p)
   #+end_src

** Create parent directories
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'before-save-hook
	       (lambda ()
		 (when buffer-file-name
		   (let ((dir (file-name-directory buffer-file-name)))
		     (when (and (not (file-exists-p dir))
				(y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
		       (make-directory dir t))))))
   #+end_src

** Transient mark mode
   #+begin_src emacs-lisp :tangle yes
     (transient-mark-mode t)
   #+end_src

** Close prompt
   #+begin_src emacs-lisp :tangle yes
     (setq confirm-kill-emacs 'y-or-n-p)
   #+end_src

** Refresh buffers on file change
   #+begin_src emacs-lisp :tangle yes
     (global-auto-revert-mode t)
   #+end_src

** Start looking for files in home
   #+begin_src emacs-lisp :tangle yes
     (setq default-directory "~/")
   #+end_src

* Programming
** Treat CamelCaseSubWords as separate words
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'prog-mode-hook 'subword-mode)
   #+end_src

** paredit
   lisp editing goodness
   #+begin_src emacs-lisp
     (use-package paredit)
   #+end_src

** rainbow-delimiters
   Nice colorful delimiters changing color by level.  A lisp
   must-have.  Good with other languages too.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook
       (prog-mode . rainbow-delimiters-mode)
       :config

       ;; call out unmatched delimiters with error face
       (set-face-attribute 'rainbow-delimiters-unmatched-face nil
			   :foreground 'unspecified
			   :inherit 'error
			   :strike-through t)

       ;; bold outermost set
       (set-face-attribute 'rainbow-delimiters-depth-1-face nil
			   :weight 'bold))

   #+end_src

** Lisps
   #+begin_src emacs-lisp
     (setq lispy-mode-hooks
	   '(clojure-mode-hook
	     emacs-lisp-mode-hook
	     lisp-mode-hook
	     scheme-mode-hook))

     (dolist (hook lispy-mode-hooks)
       (add-hook hook (lambda ()
			(setq show-paren-style 'expression)
			(paredit-mode))))
   #+end_src

** Racket
   #+begin_src emacs-lisp
     (use-package racket-mode)
   #+end_src

** json
   #+begin_src emacs-lisp
     (use-package json-mode)
   #+end_src

** nix
   #+begin_src emacs-lisp
     (use-package nix-mode
       :mode "\\.nix\\'")
   #+end_src

** lua
   #+begin_src emacs-lisp
     (use-package lua-mode
       :mode "\\.lua\\'")
   #+end_src
* Writing words
** Flyspell
   #+begin_src emacs-lisp
     (use-package flyspell
       :config
       (add-hook 'text-mode-hook 'turn-on-auto-fill)
       (add-hook 'git-commit-mode-hook 'flyspell-mode))
   #+end_src

** Markdown with GitHub Flavoured Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :commands gfm-mode

       :mode (("\\.md$" . gfm-mode))

       :config
       (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
       (custom-set-faces
	'(markdown-code-face ((t nil)))))
   #+end_src

* Utilities
** =which-key=
   Handy reminder for what's bound to what

   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode)
       (setq which-key-idle-delay 0.5))
   #+end_src

** Smart open-line
   Copied from https://github.com/freetonik/emacs-dotfiles in turn from bbatsov
   #+begin_src emacs-lisp
     (defun smart-open-line ()
       "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
       (interactive)
       (move-end-of-line nil)
       (newline-and-indent))

     (defun smart-open-line-above ()
       "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
       (interactive)
       (move-beginning-of-line nil)
       (newline-and-indent)
       (forward-line -1)
       (indent-according-to-mode))

     (global-set-key (kbd "s-<return>") 'smart-open-line)
     (global-set-key (kbd "s-S-<return>") 'smart-open-line-above)
   #+end_src

** Smart join-line
   Join lines whether you’re in a region or not.
   Copied from https://github.com/freetonik/emacs-dotfiles
   #+begin_src emacs-lisp
     (defun smart-join-line (beg end)
       "If in a region, join all the lines in it. If not, join the current line with the next line."
       (interactive "r")
       (if mark-active
	   (join-region beg end)
	 (top-join-line)))

     (defun top-join-line ()
       "Join the current line with the next line."
       (interactive)
       (delete-indentation 1))

     (defun join-region (beg end)
       "Join all the lines in the region."
       (interactive "r")
       (if mark-active
	   (let ((beg (region-beginning))
		 (end (copy-marker (region-end))))
	     (goto-char beg)
	     (while (< (point) end)
	       (join-line 1)))))

     (global-set-key (kbd "s-j") 'smart-join-line)
   #+end_src

** =indent-buffer= Reindent the whole damn thing
   #+begin_src emacs-lisp :tangle yes
     (defun indent-buffer ()
       (interactive)
       (indent-region (point-min) (point-max)))
   #+end_src
** =diff-hl= Shows diff markers in the margin

   #+begin_src emacs-lisp
     (use-package diff-hl
       :config
       (global-diff-hl-mode))
   #+end_src

** =deadgrep= interface for =ripgrep=
   #+begin_src emacs-lisp
     (use-package deadgrep
       :config (evil-collection-deadgrep-setup))
   #+end_src

** =yasnippet= and =yasnippet-snippets=
   Snippets.  Basic use: type name of snippet, hit tab

   Full manual: http://joaotavora.github.io/yasnippet/
   Snippets library: https://github.com/AndreaCrotti/yasnippet-snippets
   #+begin_src emacs-lisp
     (use-package yasnippet
       :bind ("M-j" . yas-expand)
       :config
       (setq yas-snippet-dirs
	     '("~/.emacs.d/snippets" yasnippet-snippets-dir))
       (yas-global-mode 1)
       (setq yas-indent-line 'auto))

     (use-package yasnippet-snippets)
   #+end_src

** =company=
   Use =company-mode= everywhere.
   #+begin_src emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
   #+end_src

   Use =M-/= for completion.
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-/") 'company-complete-common)
   #+end_src

** =dumb-jump= Jump-to-symbol
   #+begin_src emacs-lisp
     (use-package dumb-jump
       :config
       (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
       (setq dumb-jump-selector 'ivy))
   #+end_src

** =flycheck=
   #+begin_src emacs-lisp
     (use-package let-alist)
     (use-package flycheck)
   #+end_src

** Magit
   #+begin_src emacs-lisp
     (use-package magit
       :bind
       (("C-x g" . magit-status))
       :config
       (use-package with-editor)
       (setq git-commit-summary-max-length 50)

       (with-eval-after-load 'magit-remote
	 (magit-define-popup-action 'magit-push-popup ?P
				    'magit-push-implicitly--desc
				    'magit-push-implicitly ?p t))

       (add-hook 'magit-log-edit-mode-hook
		 (lambda ()
		   (setq fill-column 72)
		   (turn-on-auto-fill))
		 (add-hook 'with-editor-mode-hook 'evil-insert-state)))
   #+end_src
** =git-timemachine=
   #+begin_src emacs-lisp
     (use-package git-timemachine)
   #+end_src
** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :bind
       ("C-c v" . deadgrep)

       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

       (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
       (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-find-file)
       (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-find-file)

       (setq projectile-completion-system 'ivy)
       (setq projectile-switch-project-action 'projectile-dired)
       (projectile-global-mode))
   #+end_src

* File management
** Dired
   #+begin_src emacs-lisp
     (use-package dired-hide-dotfiles
       :config
       (dired-hide-dotfiles-mode)
       (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))

     (setq-default dired-listing-switches "-lhvA")

     (use-package async
       :config
       (dired-async-mode 1))
   #+end_src

** Counsel
   Completion frameowkr
   #+begin_src emacs-lisp
     ;; Ivy, Counsel.   Completion framework

     (use-package counsel
       :bind
       ("M-x" . 'counsel-M-x)
       ("C-s" . 'swiper)
       ("C-r" . 'swiper-backward)

       :config
       (use-package flx)
       (use-package smex)

       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
	     '((swiper . ivy--regex-plus)
	       (t . ivy--regex-fuzzy))))
   #+end_src

* Org-mode
  There's a lot to attack here, as it's a very expansive mode.

** Let tab inside source chunks use the embedded mode
   #+begin_src emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+end_src

* Finally

  Ask config mode to keep it's helpful settings out of the init.el.  For the way I
  want to use it, it's state we can just ignore, so we don't even load
  it back up.

  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
  #+END_SRC
